let fs,express,swaggerUi,cors,morgan,InputError,AccessError,BACKEND_PORT,swaggerDocument,save,getUserIdFromAuthorization,login,logout,register,assertValidChannel,assertValidUserId,getChannels,getChannel,addChannel,updateChannel,joinChannel,leaveChannel,inviteChannel,getUsers,getUser,updateProfile,getMessages,sendMessage,deleteMessage,editMessage,pinMessage,unpinMessage,reactMessage,unreactMessage;_e27‍.x([["default",()=>_e27‍.o]]);_e27‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_e27‍.w("express",[["default",["express"],function(v){express=v}]]);_e27‍.w("swagger-ui-express",[["default",["swaggerUi"],function(v){swaggerUi=v}]]);_e27‍.w("cors",[["default",["cors"],function(v){cors=v}]]);_e27‍.w("morgan",[["default",["morgan"],function(v){morgan=v}]]);_e27‍.w("./error",[["InputError",["InputError"],function(v){InputError=v}],["AccessError",["AccessError"],function(v){AccessError=v}]]);_e27‍.w("../../frontend/src/config",[["BACKEND_PORT",["BACKEND_PORT"],function(v){BACKEND_PORT=v}]]);_e27‍.w("../swagger.json",[["default",["swaggerDocument"],function(v){swaggerDocument=v}]]);_e27‍.w("./service",[["save",["save"],function(v){save=v}],["getUserIdFromAuthorization",["getUserIdFromAuthorization"],function(v){getUserIdFromAuthorization=v}],["login",["login"],function(v){login=v}],["logout",["logout"],function(v){logout=v}],["register",["register"],function(v){register=v}],["assertValidChannel",["assertValidChannel"],function(v){assertValidChannel=v}],["assertValidUserId",["assertValidUserId"],function(v){assertValidUserId=v}],["getChannels",["getChannels"],function(v){getChannels=v}],["getChannel",["getChannel"],function(v){getChannel=v}],["addChannel",["addChannel"],function(v){addChannel=v}],["updateChannel",["updateChannel"],function(v){updateChannel=v}],["joinChannel",["joinChannel"],function(v){joinChannel=v}],["leaveChannel",["leaveChannel"],function(v){leaveChannel=v}],["inviteChannel",["inviteChannel"],function(v){inviteChannel=v}],["getUsers",["getUsers"],function(v){getUsers=v}],["getUser",["getUser"],function(v){getUser=v}],["updateProfile",["updateProfile"],function(v){updateProfile=v}],["getMessages",["getMessages"],function(v){getMessages=v}],["sendMessage",["sendMessage"],function(v){sendMessage=v}],["deleteMessage",["deleteMessage"],function(v){deleteMessage=v}],["editMessage",["editMessage"],function(v){editMessage=v}],["pinMessage",["pinMessage"],function(v){pinMessage=v}],["unpinMessage",["unpinMessage"],function(v){unpinMessage=v}],["reactMessage",["reactMessage"],function(v){reactMessage=v}],["unreactMessage",["unreactMessage"],function(v){unreactMessage=v}]]);




































const app = express();

app.use(cors());
app.use(express.urlencoded({ extended: true, }));
app.use(express.json({ limit: '50mb', }));
app.use(morgan(':method :url :status'));

const catchErrors = fn => async (req, res) => {
  try {
    console.log(`Authorization header is ${req.header('Authorization')}`);
    if (req.method === 'GET') {
      console.log(`Query params are ${JSON.stringify(req.params)}`);
    } else {
      console.log(`Body params are ${JSON.stringify(req.body)}`);
    }
    await fn(req, res);
    save();
  } catch (err) {
    if (err instanceof InputError) {
      res.status(400).send({ error: err.message, });
    } else if (err instanceof AccessError) {
      res.status(403).send({ error: err.message, });
    } else {
      _e27‍.g.console.log(err);
      res.status(500).send({ error: 'A system error ocurred', });
    }
  }
};

/***************************************************************
                         Auth Functions
***************************************************************/

const authed = fn => async (req, res) => {
  const userId = getUserIdFromAuthorization(req.header('Authorization'));
  await fn(req, res, userId);
};

app.post('/auth/login', catchErrors(async (req, res) => {
  const { email, password, } = req.body;
  return res.json(await login(email, password));
}));

app.post('/auth/register', catchErrors(async (req, res) => {
  const { email, password, name, } = req.body;
  return res.json(await register(email, password, name));
}));

app.post('/auth/logout', catchErrors(authed(async (req, res, authUserId) => {
  await logout(authUserId);
  return res.json({});
})));

/***************************************************************
                        Channel Functions
***************************************************************/

app.get('/channel', catchErrors(authed(async (req, res, authUserId) => {
  return res.json({ channels: await getChannels(), });
})));

app.get('/channel/:channelId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  await assertValidChannel(channelId);
  return res.json(await getChannel(authUserId, channelId));
})));

app.post('/channel', catchErrors(authed(async (req, res, authUserId) => {
  const { name, _, description, } = req.body;
  return res.json({
    channelId: await addChannel(authUserId, name, req.body.private, description),
  });
})));

app.put('/channel/:channelId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  const { name, description, } = req.body;
  await assertValidChannel(channelId);
  await updateChannel(authUserId, channelId, name, description);
  return res.status(200).send({});
})));

app.post('/channel/:channelId/join', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  await assertValidChannel(channelId);
  await joinChannel(authUserId, channelId);
  return res.status(200).send({});
})));

app.post('/channel/:channelId/leave', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  await assertValidChannel(channelId);
  await leaveChannel(authUserId, channelId);
  return res.status(200).send({});
})));

app.post('/channel/:channelId/invite', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  const { userId, } = req.body;
  await assertValidChannel(channelId);
  await assertValidUserId(userId.toString());
  await inviteChannel(authUserId, channelId, userId);
  return res.status(200).send({});
})));

/***************************************************************
                         User Functions
***************************************************************/

app.get('/user', catchErrors(authed(async (req, res, authUserId) => {
  return res.json({ users: await getUsers(), });
})));

app.get('/user/:userId', catchErrors(authed(async (req, res, authUserId) => {
  const { userId, } = req.params;
  await assertValidUserId(userId);
  return res.json(await getUser(userId));
})));

app.put('/user', catchErrors(authed(async (req, res, authUserId) => {
  const { email, password, name, bio, image, } = req.body;
  await updateProfile(authUserId, email, password, name, bio, image);
  return res.status(200).send({});
})));

/***************************************************************
                        Message Functions
***************************************************************/

app.get('/message/:channelId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  const { start, } = req.query;
  await assertValidChannel(channelId);
  return res.json({ messages: await getMessages(authUserId, channelId, parseInt(start, 10)), });
})));

app.post('/message/:channelId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, } = req.params;
  const { message, image, } = req.body;
  await assertValidChannel(channelId);
  await sendMessage(authUserId, channelId, message, image);
  return res.status(200).send({});
})));

app.put('/message/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  const { message, image, } = req.body;
  await assertValidChannel(channelId);
  await editMessage(authUserId, channelId, messageId, message, image);
  return res.status(200).send({});
})));

app.delete('/message/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  await assertValidChannel(channelId);
  await deleteMessage(authUserId, channelId, messageId);
  return res.status(200).send({});
})));

app.post('/message/pin/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  await assertValidChannel(channelId);
  await pinMessage(authUserId, channelId, messageId);
  return res.status(200).send({});
})));

app.post('/message/unpin/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  await assertValidChannel(channelId);
  await unpinMessage(authUserId, channelId, messageId);
  return res.status(200).send({});
})));

app.post('/message/react/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  const { react, } = req.body;
  await assertValidChannel(channelId);
  await reactMessage(authUserId, channelId, messageId, react);
  return res.status(200).send({});
})));

app.post('/message/unreact/:channelId/:messageId', catchErrors(authed(async (req, res, authUserId) => {
  const { channelId, messageId, } = req.params;
  const { react, } = req.body;
  await assertValidChannel(channelId);
  await unreactMessage(authUserId, channelId, messageId, react);
  return res.status(200).send({});
})));

/***************************************************************
                       Running Server
***************************************************************/

app.get('/', (req, res) => res.redirect('/docs'));

app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));

const port = BACKEND_PORT || 5000;

const server = app.listen(port, () => {
  console.log(`Backend is now listening on port ${port}!`);
  console.log(`For API docs, navigate to http://localhost:${port}`);
});

_e27‍.d(server);
